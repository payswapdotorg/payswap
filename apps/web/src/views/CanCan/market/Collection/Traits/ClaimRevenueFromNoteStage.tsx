import { useEffect } from 'react'
import {
  Flex,
  Box,
  Text,
  Button,
  ButtonMenu,
  ButtonMenuItem,
  Input,
  ErrorIcon,
  Grid,
  Balance,
} from '@pancakeswap/uikit'
import { useTranslation } from '@pancakeswap/localization'
import _toNumber from 'lodash/toNumber'
import { StyledItemRow } from 'views/Nft/market/components/Filters/ListFilter/styles'
import { useGetPendingFromNote } from 'state/cancan/hooks'
import { getBalanceNumber } from '@pancakeswap/utils/formatBalance'
import BigNumber from 'bignumber.js'
import { Divider, GreyedOutContainer } from './styles2'

interface RemoveStageProps {
  state: any
  currency: any
  handleRawValueChange?: any
  continueToNextStage: () => void
}

const ClaimPendingRevenue: React.FC<any> = ({ state, handleChange, handleRawValueChange, continueToNextStage }) => {
  const { t } = useTranslation()
  const { data, refetch } = useGetPendingFromNote(state.token, state.tokenId)

  useEffect(() => {
    refetch()
  }, [refetch, state])

  return (
    <>
      <GreyedOutContainer style={{ paddingTop: '50px' }}>
        <StyledItemRow>
          <Text fontSize="12px" color="secondary" textTransform="uppercase" paddingTop="3px" paddingRight="50px" bold>
            {t('Source')}
          </Text>
          <ButtonMenu
            scale="xs"
            variant="subtle"
            activeIndex={state.marketplace}
            onItemClick={handleRawValueChange('marketplace')}
          >
            <ButtonMenuItem>{t('Item Sales')}</ButtonMenuItem>
            <ButtonMenuItem>{t('NFT Sales')}</ButtonMenuItem>
            <ButtonMenuItem>{t('Paywall Sales')}</ButtonMenuItem>
          </ButtonMenu>
        </StyledItemRow>
      </GreyedOutContainer>
      {!state.marketplace ? (
        <GreyedOutContainer>
          <Balance
            lineHeight="1"
            color="textSubtle"
            fontSize="12px"
            decimals={state.decimals}
            value={getBalanceNumber(new BigNumber(data?.marketNoteRevenue?.toString()), state.decimals)}
          />
          <Text color="primary" fontSize="12px" display="inline" bold as="span" textTransform="uppercase">
            {t('Pending Revenue From Item Sales')}
          </Text>
        </GreyedOutContainer>
      ) : state.marketplace === 1 ? (
        <GreyedOutContainer>
          <Balance
            lineHeight="1"
            color="textSubtle"
            fontSize="12px"
            decimals={state.decimals}
            value={getBalanceNumber(new BigNumber(data?.nftNoteRevenue?.toString()), state.decimals)}
          />
          <Text color="primary" fontSize="12px" display="inline" bold as="span" textTransform="uppercase">
            {t('Pending Revenue From NFT Sales')}
          </Text>
        </GreyedOutContainer>
      ) : (
        <GreyedOutContainer>
          <Balance
            lineHeight="1"
            color="textSubtle"
            fontSize="12px"
            decimals={state.decimals}
            value={getBalanceNumber(new BigNumber(data?.paywallNoteRevenue?.toString()), state.decimals)}
          />
          <Text color="primary" fontSize="12px" display="inline" bold as="span" textTransform="uppercase">
            {t('Pending Revenue From Paywall Sales')}
          </Text>
        </GreyedOutContainer>
      )}
      <GreyedOutContainer>
        <Text fontSize="12px" color="secondary" textTransform="uppercase" bold>
          {t('Token ID')}
        </Text>
        <Input
          type="text"
          inputMode="decimal"
          pattern="^[0-9]+[.,]?[0-9]*$"
          scale="sm"
          name="tokenId"
          value={state.tokenId}
          placeholder={t('input token id')}
          onChange={handleChange}
        />
      </GreyedOutContainer>
      <GreyedOutContainer>
        <Text fontSize="12px" color="secondary" textTransform="uppercase" bold>
          {t('Identity Token ID')}
        </Text>
        <Input
          type="text"
          inputMode="decimal"
          pattern="^[0-9]+[.,]?[0-9]*$"
          scale="sm"
          name="identityTokenId"
          value={state.identityTokenId}
          placeholder={t('input identity token id')}
          onChange={handleChange}
        />
      </GreyedOutContainer>
      <Grid gridTemplateColumns="32px 1fr" p="16px" maxWidth="360px">
        <Flex alignSelf="flex-start">
          <ErrorIcon width={24} height={24} color="textSubtle" />
        </Flex>
        <Box>
          <Text small color="textSubtle">
            {t(
              'This will transfer all the revenue generated by your channel on the specified marketplace to your wallet address.',
            )}
          </Text>
        </Box>
      </Grid>
      <Divider />
      <Flex flexDirection="column" px="16px" pb="16px">
        <Button mb="8px" onClick={continueToNextStage}>
          {t('Confirm')}
        </Button>
      </Flex>
    </>
  )
}

export default ClaimPendingRevenue
